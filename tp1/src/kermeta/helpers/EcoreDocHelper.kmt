/* $Id:$ 
 * Creation : October 16, 2012
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            29006342
 */
//@mainClass "root_package::Main"
//@mainOperation "main"


package root_package;


require kermeta

require "platform:/resource/tp1/src/kermeta/helpers/EcoreGenericsHelper.kmt"
require "platform:/resource/tp1/src/kermeta/helpers/EcoreUtil.kmt"
require "platform:/resource/tp1/model/spreadsheet.ecore"
using spreadsheet
using EcoreUtil
using ecore

class EcoreDocHelper
{
	operation flat(path : String) : Void is do 
		var util : EcoreUtil init EcoreUtil.new
		var inputPack : EPackage
		inputPack := util.loadModel(path)
		inputPack.eClassifiers.each{e |
			stdio.writeln(e.name+":")
			
			if e.isKindOf(EClass) then
				var myClasses : EClass 
				myClasses ?= e
		
				myClasses.eSuperTypes.each { ancestor |
					stdio.writeln("\t\teSuperType \""+ancestor.name+"\"")
				}
			end
		}
	end
	
	operation short(path : String) : Void is do
		var util : EcoreUtil init EcoreUtil.new
		var inputPack : EPackage 
		var eRefName : String
		var eOpositeName : String
		inputPack := util.loadModel(path)
		inputPack.eClassifiers.each{e |
			stdio.writeln(e.name+":")
			
			if e.isKindOf(EClass) then
				var myClasses : EClass 
				myClasses ?= e
								
				myClasses.eStructuralFeatures.each {eSF|
				
					if eSF.isKindOf(EReference) then
						stdio.write("\tattr "+eSF.name+" : ") 
						var myClasses2 : EReference 
						myClasses2 ?= eSF
						if myClasses2 != void then
							stdio.writeln( myClasses2.eReferenceType.name)	
						end
					else
						stdio.writeln("\top "+eSF.name+ "(")
						var myClasses3 : EReference 
						myClasses3 ?= eSF
						if myClasses3 != void then
							stdio.writeln( ")")	
						end
					end
				}
				
			end
			stdio.writeln("----------------------------------------------\n")
		}
	end
}